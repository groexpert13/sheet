'use client';

import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Label } from '@/components/ui/label';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { TrendingUp, Users, MessageSquare, FileText, Package, Heart } from 'lucide-react';
import { CompetencyData } from '@/types/diagnostic';

interface CompetencySectionProps {
  data: CompetencyData;
  updateData: (data: CompetencyData) => void;
  onComplete: () => void;
}

const competencies = [
  {
    key: 'traffic',
    title: '–¢–†–ê–§–ò–ö',
    icon: TrendingUp,
    color: 'from-blue-500 to-cyan-500',
    descriptions: [
      '–ñ–∏–≤—É —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–≤–æ–∏—Ö –∞–∫—Ç–∏–≤–∞—Ö - —Å–∞—Ä–∞—Ñ–∞–Ω/–±–∞–∑–µ/–∞–∫–∫–∞—É–Ω—Ç–µ/–∫–∞–Ω–∞–ª–µ, —Ç—Ä–∞—Ñ–∏–∫ –Ω–µ –ø–æ–∫—É–ø–∞—é',
      '–ü—Ä–æ–¥–≤–∏–≥–∞—é—Å—å –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏ - —á–µ—Ä–µ–∑ Reels, TikTok, YouTube Shorts',
      '–ü—ã—Ç–∞—é—Å—å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —Ä–µ–∫–ª–∞–º—É, –Ω–æ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∂–µ–ª–∞—Ç—å –ª—É—á—à–µ–≥–æ',
      '–ü–æ—Å—Ç–æ—è–Ω–Ω–æ –≤–∫–ª–∞–¥—ã–≤–∞—é –¥–µ–Ω—å–≥–∏ –≤ —Ç—Ä–∞—Ñ–∏–∫, –≤—Å–µ —Ä–∞—Å—á–µ—Ç—ã –ø—Ä–æ–≤–µ–¥–µ–Ω—ã, –µ—Å—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∞',
      '–ü–æ–∫—É–ø–∞—é —Ç—Ä–∞—Ñ–∏–∫ –Ω–∞ –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö, –æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å –º–∏–Ω–∏–º—É–º –≤ 3 —Ä–∞–∑–∞'
    ]
  },
  {
    key: 'expertise',
    title: '–≠–ö–°–ü–ï–†–¢–ù–û–°–¢–¨ –í –ù–ò–®–ï',
    icon: Users,
    color: 'from-purple-500 to-indigo-500',
    descriptions: [
      '–ù–µ—Ç —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π, –≥–¥–µ —è –ø–æ–∫–∞–∑—ã–≤–∞—é —Å–µ–±—è –∫–∞–∫ —ç–∫—Å–ø–µ—Ä—Ç–∞',
      '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ –µ—Å—Ç—å, –Ω–æ –Ω–µ—Ç –ø–æ–Ω–∏–º–∞–Ω–∏—è, –∫–∞–∫–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å',
      '–•–æ—Ä–æ—à–æ —É–ø–∞–∫–æ–≤–∞–Ω–∞ –æ–¥–Ω–∞ —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å–µ—Ç—å, –Ω–æ –Ω—É–∂–Ω–æ —Ä–∞–∑–≤–∏–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–∞–Ω–∞–ª—ã',
      '–ö–æ –º–Ω–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –∫–∞–∫ –∫ —Å–∞–º–æ–º—É –∫—Ä—É—Ç–æ–º—É —ç–∫—Å–ø–µ—Ä—Ç—É –≤ –Ω–∏—à–µ',
      '–Ø –ª–∏–¥–µ—Ä –º–Ω–µ–Ω–∏–π –≤ —Å–≤–æ–µ–π –Ω–∏—à–µ, –Ω–∞ –º–µ–Ω—è –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–µ—Ç—Å—è –±–æ–ª—å—à–∞—è —á–∞—Å—Ç—å —Ä—ã–Ω–∫–∞'
    ]
  },
  {
    key: 'sales',
    title: '–ü–†–û–î–ê–ñ–ò',
    icon: MessageSquare,
    color: 'from-green-500 to-emerald-500',
    descriptions: [
      '–ü—Ä–æ–¥–∞—é —Ç–æ–ª—å–∫–æ —Å–∞–º, –∏–∑ –±–ª–æ–≥–∞, –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π, –≤—ã–≥–æ—Ä–∞—é –æ—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞',
      '–•–æ—Ä–æ—à–æ –ø—Ä–æ–¥–∞—é —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π, –Ω–æ –≤—Å–µ –¥–µ—Ä–∂–∏—Ç—Å—è –Ω–∞ —ç–Ω–µ—Ä–≥–∏–∏ –∏ —Ö–∞—Ä–∏–∑–º–µ',
      '–ü—Ä–æ–¥–∞–∂–∏ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –æ—Ç–¥–µ–ª –ø—Ä–æ–¥–∞–∂, –µ—Å—Ç—å –∞–≤—Ç–æ–≤–æ—Ä–æ–Ω–∫–∞',
      '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ –ø—Ä–∏—Ö–æ–¥—è—Ç –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤–æ—Ä–æ–Ω–∫–∏ –±–µ–∑ —É—á–∞—Å—Ç–∏—è —ç–∫—Å–ø–µ—Ä—Ç–∞',
      '–ë–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–ª–∞—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, –∑–∞—è–≤–æ–∫ –±–æ–ª—å—à–µ —á–µ–º –º–æ–∂–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å'
    ]
  },
  {
    key: 'content',
    title: '–ö–û–ù–¢–ï–ù–¢',
    icon: FileText,
    color: 'from-orange-500 to-red-500',
    descriptions: [
      '–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–µ–ª–∞–ª –ø—Ä–æ–≥—Ä–µ–≤—ã, –Ω–∏–≥–¥–µ –Ω–µ –≤–µ–¥–µ—Ç—Å—è –∫–æ–Ω—Ç–µ–Ω—Ç',
      '–£—Å–ø–µ–≤–∞—é –≤–µ—Å—Ç–∏ –ø—Ä–æ–≥—Ä–µ–≤ —Ç–æ–ª—å–∫–æ –≤ –æ–¥–Ω–æ–º –∫–∞–Ω–∞–ª–µ',
      '–í–µ–¥—É –ø—Ä–æ–≥—Ä–µ–≤ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–∞–Ω–∞–ª–∞—Ö, –Ω–æ –∑–∞–Ω–∏–º–∞–µ—Ç –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏',
      '–ï—Å—Ç—å –ø—Ä–æ–≥—Ä–µ–≤–∞—é—â–∞—è –∞–≤—Ç–æ–≤–æ—Ä–æ–Ω–∫–∞, –Ω–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã',
      '–ï–¥–∏–Ω–∞—è –ª–∏–Ω–∏—è –ø—Ä–æ–≥—Ä–µ–≤–∞ –≤–æ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–∞—Ö, –ø—Ä–æ–≥—Ä–µ–≤ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω –∫–æ–º–∞–Ω–¥–µ'
    ]
  },
  {
    key: 'product',
    title: '–ü–†–û–î–£–ö–¢',
    icon: Package,
    color: 'from-pink-500 to-rose-500',
    descriptions: [
      '–°–æ–≤—Å–µ–º –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–∞. –¢–æ–ª—å–∫–æ –¥—É–º–∞—é –æ –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏–∏',
      '–°–æ–º–Ω–µ–≤–∞—é—Å—å –≤ —Å–≤–æ–µ–º –ø—Ä–æ–¥—É–∫—Ç–µ. –î—É–º–∞—é –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∏—à–∏',
      '–£–≤–µ—Ä–µ–Ω –≤ –ø—Ä–æ–¥—É–∫—Ç–µ, –Ω–æ –±–æ—é—Å—å –ø–æ–≤—ã—Å–∏—Ç—å —Ü–µ–Ω—ã',
      '–ï—Å—Ç—å –ø–∞–∫–µ—Ç–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤–∞—è –ª–∏–Ω–µ–π–∫–∞',
      '–ú–æ–π –ø—Ä–æ–¥—É–∫—Ç ‚Ññ1 –≤ –Ω–∏—à–µ. –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã –º–µ–Ω—è –∫–æ–ø–∏—Ä—É—é—Ç'
    ]
  },
  {
    key: 'satisfaction',
    title: '–û–ë–©–ï–ï –£–î–û–í–õ–ï–¢–í–û–†–ï–ù–ò–ï',
    icon: Heart,
    color: 'from-teal-500 to-cyan-500',
    descriptions: [
      '–ü—Ä–æ–µ–∫—Ç –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –º–æ–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏, –ø–æ–¥—É–º—ã–≤–∞—é –æ —Å–º–µ–Ω–µ –Ω–∏—à–∏',
      '–°—á–∏—Ç–∞—é –ø—Ä–æ–µ–∫—Ç –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–º, –Ω–æ —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –ø–æ–ª—É—á–∞—é',
      '–ü—Ä–æ–µ–∫—Ç –¥–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –Ω–æ –≤—Å–µ –∑–∞–≤—è–∑–∞–Ω–æ –Ω–∞ –º–Ω–µ',
      '–û—Ç –º–µ—Å—è—Ü–∞ –∫ –º–µ—Å—è—Ü—É —Ä–∞—Å—Ç—ë–º, –µ—Å—Ç—å –∫–ª–∞—Å—Å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞',
      '–ü—Ä–æ–µ–∫—Ç —Ä–∞—Å—Ç–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ —á–∞—Å—ã –¥–∞–∂–µ –±–µ–∑ –º–µ–Ω—è'
    ]
  }
];

export default function CompetencySection({ data, updateData, onComplete }: CompetencySectionProps) {
  const handleLevelChange = (competencyKey: string, level: number) => {
    updateData({
      ...data,
      [competencyKey]: level
    });
  };

  const handleComplete = () => {
    onComplete();
  };

  const getAverageLevel = () => {
    const values = Object.values(data);
    return Math.round(values.reduce((sum, val) => sum + val, 0) / values.length * 10) / 10;
  };

  return (
    <div className="space-y-6">
      <div className="text-center mb-8">
        <h2 className="text-3xl font-bold text-gray-900 mb-4">–í –∫–∞–∫–æ–π —Å—Ç–∞–¥–∏–∏ —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø—Ä–æ–µ–∫—Ç?</h2>
        <p className="text-lg text-gray-600 max-w-3xl mx-auto">
          –û—Ü–µ–Ω–∏–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã —à–µ—Å—Ç–∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π –∏ –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å —Ä–∞–∑–≤–∏—Ç–∏–µ–º –∫–∞–∂–¥–æ–π –∏–∑ —Å—Ñ–µ—Ä
        </p>
        <div className="mt-4">
          <Badge className="bg-gradient-to-r from-blue-500 to-purple-500 text-white text-lg px-4 py-2">
            –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å: {getAverageLevel()}/5
          </Badge>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {competencies.map((competency) => {
          const Icon = competency.icon;
          const currentLevel = data[competency.key as keyof CompetencyData];
          
          return (
            <Card key={competency.key} className="hover:shadow-lg transition-all duration-300">
              <CardHeader className={`bg-gradient-to-r ${competency.color} text-white rounded-t-lg`}>
                <CardTitle className="flex items-center space-x-3">
                  <Icon className="h-6 w-6" />
                  <span>{competency.title}</span>
                </CardTitle>
                <div className="flex items-center space-x-2">
                  <span className="text-white/90">–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å:</span>
                  <Badge className="bg-white text-gray-900 font-bold">{currentLevel}/5</Badge>
                </div>
              </CardHeader>
              <CardContent className="p-6">
                <div className="space-y-4">
                  <Label className="text-sm font-medium text-gray-700">
                    –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å:
                  </Label>
                  
                  <div className="space-y-3">
                    {competency.descriptions.map((description, index) => {
                      const level = index + 1;
                      const isSelected = currentLevel === level;
                      
                      return (
                        <div
                          key={level}
                          onClick={() => handleLevelChange(competency.key, level)}
                          className={`p-4 rounded-lg border-2 cursor-pointer transition-all duration-200 ${
                            isSelected 
                              ? 'border-blue-500 bg-blue-50 shadow-md' 
                              : 'border-gray-200 hover:border-gray-300 hover:bg-gray-50'
                          }`}
                        >
                          <div className="flex items-start space-x-3">
                            <div className={`w-8 h-8 rounded-full flex items-center justify-center text-white font-bold text-sm ${
                              isSelected ? 'bg-blue-500' : 'bg-gray-400'
                            }`}>
                              {level}
                            </div>
                            <p className={`text-sm leading-relaxed flex-1 ${
                              isSelected ? 'text-blue-900 font-medium' : 'text-gray-700'
                            }`}>
                              {description}
                            </p>
                          </div>
                        </div>
                      );
                    })}
                  </div>
                </div>
              </CardContent>
            </Card>
          );
        })}
      </div>

      <Card className="bg-gradient-to-r from-blue-50 to-purple-50 border-blue-200">
        <CardContent className="p-6">
          <h3 className="text-lg font-semibold text-blue-900 mb-3">üìä –ê–Ω–∞–ª–∏–∑ –≤–∞—à–∏—Ö –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π</h3>
          <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
            {competencies.map((comp) => {
              const level = data[comp.key as keyof CompetencyData];
              const percentage = (level / 5) * 100;
              
              return (
                <div key={comp.key} className="text-center">
                  <p className="text-sm font-medium text-gray-700 mb-2">{comp.title}</p>
                  <div className="relative w-16 h-16 mx-auto">
                    <svg className="w-16 h-16 transform -rotate-90" viewBox="0 0 36 36">
                      <circle
                        cx="18"
                        cy="18"
                        r="16"
                        fill="none"
                        className="stroke-gray-200"
                        strokeWidth="3"
                      />
                      <circle
                        cx="18"
                        cy="18"
                        r="16"
                        fill="none"
                        className="stroke-blue-500"
                        strokeWidth="3"
                        strokeDasharray={`${percentage}, 100`}
                        strokeLinecap="round"
                      />
                    </svg>
                    <div className="absolute inset-0 flex items-center justify-center">
                      <span className="text-sm font-bold text-gray-700">{level}</span>
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        </CardContent>
      </Card>

      <div className="flex justify-center">
        <Button 
          onClick={handleComplete}
          className="bg-gradient-to-r from-green-500 to-blue-500 hover:from-green-600 hover:to-blue-600 text-white px-8 py-3"
        >
          –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–∑–¥–µ–ª
        </Button>
      </div>
    </div>
  );
}